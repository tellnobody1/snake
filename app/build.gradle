import org.eclipse.jgit.api.Git
import org.eclipse.jgit.revwalk.RevWalk
import org.eclipse.jgit.storage.file.FileRepositoryBuilder

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId 'xyz.uaapps.snake'
        minSdk 21
        targetSdk 34
        versionCode gitCommitsCount(rootDir)
        versionName gitDescribe(rootDir)

        vectorDrawables {
            useSupportLibrary true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            var variantName = variant.name == 'debug' ? '-debug' : ''
            outputFileName = "${rootProject.name.toLowerCase()}-${variant.versionName}${variantName}.apk"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.9"
    }

    namespace 'xyz.uaapps.snake'
}

dependencies {
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    implementation 'androidx.activity:activity-compose:1.8.2'

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    implementation 'androidx.browser:browser:1.7.0'
    implementation 'androidx.datastore:datastore-preferences:1.0.0'
}

static def gitCommitsCount(rootDir) {
    try (
        var repository = new FileRepositoryBuilder().setWorkTree(rootDir).build();
        var revWalk = new RevWalk(repository)
    ) {
        var headCommit = revWalk.parseCommit(repository.resolve("HEAD"))
        revWalk.markStart(headCommit)

        var commitCount = 0
        revWalk.each { commitCount++ }

        return commitCount
    }
}

static def gitDescribe(rootDir) {
    try (
        var repository = new FileRepositoryBuilder().setWorkTree(rootDir).build();
        var git = new Git(repository)
    ) {
        return git.describe().call()
    }
}
